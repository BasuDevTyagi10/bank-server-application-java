package com.cg.bankapp.dao;

import com.cg.bankapp.entity.Account;
import com.cg.bankapp.entity.TransactionType;
import com.cg.bankapp.exception.AccountNotFoundException;
import com.cg.bankapp.exception.InvalidAccountException;
import com.cg.bankapp.exception.TransactionFailedException;

/**
 * Bank DataAccessObject (DAO) implementation is enabled by implementing this
 * interface which has methods to save an <code>Account</code> and retrieve any
 * <code>Account</code> by ID and perform a <code>Transaction</code> in the
 * <code>BankDatabase</code> along with updating the associated
 * <code>Account</code>.
 */
public interface IBankDAO {

	/**
	 * Save an <code>Account</code> in the database.
	 * 
	 * @param account
	 * @return accountNo of the newly created <code>Account</code> entry in the
	 *         database.
	 * @throws InvalidAccountException
	 * @throws TransactionFailedException
	 */
	public Long save(Account account) throws InvalidAccountException, TransactionFailedException;

	/**
	 * Find <code>Account</code> by accountNo from the database.
	 * 
	 * @param accountNo
	 * @return <code>Account</code> if exists.
	 * @throws AccountNotFoundException
	 * @throws TransactionFailedException
	 */
	public Account getAccountById(Long accountNo) throws AccountNotFoundException, TransactionFailedException;

	/**
	 * Perform a </code>Transaction</code> in the database involving a single
	 * <code>Account</code>.
	 * 
	 * @param account         <code>Account</code> involved in the
	 *                        <code>Transaction</code>.
	 * @param transactionType Type of <code>Transaction</code>.
	 * @param amount          <code>Transaction</code> amount.
	 * @return transactionId generated by the database.
	 * @throws TransactionFailedException
	 */
	public Long performTransaction(Account account, TransactionType transactionType, Double amount)
			throws TransactionFailedException;

	/**
	 * Perform a </code>Transaction</code> in the database involving a two
	 * <code>Account</code>. The <code>ETransactionType</code> for this method is
	 * TRANSFER.
	 * 
	 * @param fromAccount <code>Account</code> from where the
	 *                    <code>Transaction</code> starts.
	 * @param toAccount   <code>Account</code> to where the <code>Transaction</code>
	 *                    ends.
	 * @param amount      <code>Transaction</code> amount.
	 * @return transactionId generated by the database.
	 * @throws TransactionFailedException
	 * @see TransactionType.TRANSFER
	 */
	public Long performTransaction(Account fromAccount, Account toAccount, Double amount)
			throws TransactionFailedException;
}
